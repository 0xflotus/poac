aliases:
  - &restore-poac-cache
    keys: # restores saved poac cache
#      - v1-poac-cache-{{ checksum "poac.lock" }}
      - v1-poac-cache-{{ checksum "poac.yml" }}
      - v1-poac-cache-{{ .Branch }}
      - v1-poac-cache
  - &save-poac-cache1
    key: v1-poac-cache-{{ checksum "poac.lock" }}
    paths: "deps"
  - &save-poac-cache2
    key: v1-poac-cache-{{ checksum "poac.yml" }}
    paths: "deps"
  - &save-poac-cache3
    key: v1-poac-cache-{{ .Branch }}
    paths: "deps"
  - &save-poac-cache4
    key: v1-poac-cache
    paths: "deps"

  - &restore-poac-build-cache
    keys: # restores saved build cache
      - v1-build-cache-{{ .Branch }}
      - v1-build-cache
  - &save-poac-build-cache1
    key: v1-build-cache-{{ .Branch }}
    paths: "_build"
  - &save-poac-build-cache2
    key: v1-build-cache
    paths: "_build"

  - &buildflow
    steps:
      - attach_workspace:
          at: .
      - run: cmake .
      - run: make

      - restore_cache: *restore-poac-cache
      - run: ./poac install
#      - save_cache: *save-poac-cache1
      - save_cache: *save-poac-cache2
      - save_cache: *save-poac-cache3
      - save_cache: *save-poac-cache4
#      - save_cache: *save-poac-build-cache1
#      - save_cache: *save-poac-build-cache2

      - run: file ./poac

      - run: ./poac test --report -- --output_format=XML --log_level=all --report_level=no
      - store_test_results:  # upload test results for display in Test Summary
          path: _build/test/report
      - persist_to_workspace:
          root: .
          paths: .

version: 2
jobs:
  checkout_code:
    docker:
      - image: buildpack-deps:16.04 # TODO: Use already poac installed image (based on ubuntu:16.04)
    steps:
      - checkout
#      - restore_cache: *restore-poac-cache
#      - run: poac install ## source file only (not pre-build)
#      - save_cache: *save-poac-cache1
#      - save_cache: *save-poac-cache2
#      - save_cache: *save-poac-cache3
#      - save_cache: *save-poac-cache4
      - persist_to_workspace:
          root: .
          paths: .

  build_gcc_7:
    <<: *buildflow
    docker:
      - image: matken11235/poac:gcc-7
    environment:
      CXX: g++

  build_gcc_8:
    <<: *buildflow
    docker:
      - image: matken11235/poac:gcc-8
    environment:
      CXX: g++

  release:
    docker:
      - image: circleci/golang:1.11
    steps:
      - attach_workspace:
          at: .
      - run: ls -a
      - run: go get github.com/tcnksm/ghr
#      - run: ghr 0.0.1 out

  gh_pages:
    working_directory: ~/poac/docs
    docker:
      - image: node:10
    steps:
      - checkout
      - run: git config --global user.name $USERNAME
      - run: git config --global user.email $EMAIL
      - run: cp -r .circleci docs
      - run: cd docs && npm i
      - run: cd docs && npm run build
      - run: cd docs && npm run publish

workflows:
  version: 2
  builds:
    jobs:
      - checkout_code
      - build_gcc_7:
          requires:
            - checkout_code
      - build_gcc_8:
          requires:
            - checkout_code
      - release:
          requires:
            - build_gcc_7
            - build_gcc_8
#          filters:
#            branches:
#              ignore: /.*/
#            tags:
#              only: /^(?:(\d+)(\.|_))?(?:(\d+)(\.|_))?(\*|\d+)-.*$/
      - gh_pages:
          filters:
            branches:
              ignore: gh-pages
      # Clang
#      - clang_5
#      - clang_6
